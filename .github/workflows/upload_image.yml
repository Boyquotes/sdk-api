name: SDK API

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "Github Commit Hash"
        required: true
        type: string

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Read versions from package.json
        id: versions
        run: |
          API_VERSION=$(node -p "require('./package.json').version")
          SDK_VERSION=$(node -p "require('./package.json').dependencies['@cedelabs-private/sdk'].replace('^', '')")
          VERSION="${API_VERSION}_sdk${SDK_VERSION}"
          echo "api_version=${API_VERSION}" >> $GITHUB_OUTPUT
          echo "sdk_version=${SDK_VERSION}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Login to GCP Artifact registry
        run: gcloud auth configure-docker ${{ vars.GCP_ACR_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Retrieve Docker layers from cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildx-cache
          key: ${{ runner.os }}-buildx-cache

      - name: Build, tag, and push image to GCP ACR
        uses: docker/build-push-action@v6
        id: build-acr-docker-image
        with:
          context: ./
          push: true
          file: ./Dockerfile
          build-args: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            API_VERSION=${{ steps.versions.outputs.api_version }}
            SDK_VERSION=${{ steps.versions.outputs.sdk_version }}
          tags: |
            ${{ vars.GCP_ACR_REGISTRY }}/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ACR_REPOSITORY }}/${{ vars.GCP_ACR_IMAGE_NAME }}-v${{ steps.versions.outputs.version }}:${{ github.sha }}
            ${{ vars.GCP_ACR_REGISTRY }}/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ACR_REPOSITORY }}/${{ vars.GCP_ACR_IMAGE_NAME }}-v${{ steps.versions.outputs.version }}:latest

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.versions.outputs.version }}
          release_name: Release v${{ steps.versions.outputs.version }}
          body: |
            SDK-API Version: ${{ steps.versions.outputs.api_version }}
            SDK Version: ${{ steps.versions.outputs.sdk_version }}
            
            Docker Image: ${{ vars.GCP_ACR_REGISTRY }}/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ACR_REPOSITORY }}/${{ vars.GCP_ACR_IMAGE_NAME }}-v${{ steps.versions.outputs.version }}:${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Swagger Documentation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docs/swagger.json
          asset_name: swagger.json
          asset_content_type: application/json